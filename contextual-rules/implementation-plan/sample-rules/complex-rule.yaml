id: complex001
description: A complex rule with all available fields.
language: go
tags:
  - best-practices
  - error-handling
  - formatting
rule: |
  # Go Error Handling Best Practices
  
  ## General Guidelines
  
  1. Always check error returns from function calls
  2. Use the `errors.Is()` and `errors.As()` functions for error checking
  3. Wrap errors with context using `fmt.Errorf("context: %w", err)`
  4. Create custom error types for specific error conditions
  
  ## Example
  
  ```go
  func ProcessFile(path string) error {
      data, err := os.ReadFile(path)
      if err != nil {
          return fmt.Errorf("reading file %s: %w", path, err)
      }
      
      // Process data...
      
      return nil
  }
  ```
  
  ## Error Types
  
  For specific error conditions, create custom error types:
  
  ```go
  type NotFoundError struct {
      ID string
  }
  
  func (e *NotFoundError) Error() string {
      return fmt.Sprintf("resource with ID %s not found", e.ID)
  }
